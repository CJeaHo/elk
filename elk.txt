elk 실행 확인
http://localhost:9200

kibana 실행 확인
http://localhost:5601

# index 생성
PUT classes

# index 조회
GET classes

# index 삭제
DELETE classes

# 문서 생성
POST/인덱스명/_doc/id 
POST classes/_doc/1
{
   "name":"gildong",
   "msg" : "hello"
}

// 확인
GET classes/_doc/1

# id를 지정하지않고 삽입한 경우 id가 맘대로 자동생성되서 나온다(문자+숫자)
POST classes/_doc
{
   "name":"newName",
   "msg" : "newMsg"
}

// <cmd창이나 우분투에서는 이렇게 써야한다 (*우분투에서는 쌍따옴표가 한개)>
// curl =H "Cont-type: application/json" - XPOST localhost:9200/classes/_doc/2 -d "{""name"":""newName"",""msg"":""kkk}""f"

# id=1을 업데이트 
POST classes/_update/1 
{
  "doc":{
    "msg": "안녕"
  }
}

# 없는 필드를 업데이트하면 필드가 추가된다
POST classes/_update/1
{
  "doc":{
    "num1": 1
  }
}

# script를 이용한 값 변경
POST classes/_update/1
{
  "script": {
    "source": "ctx._source.num1 += params.value",
    "params": {
      "value": 3
      
    }
  }
}

# _bulk: 한꺼번에 많은 items를 넣을 때
POST _bulk
{"index":{"_index":"itest", "_id":"1"}}
{"msg":"안녕하세요"}
{"index":{"_index":"itest", "_id":"2"}}
{"msg":"안녕히가세요"}
{"index":{"_index":"itest", "_id":"3"}}
{"msg":"안녕히계세요"}

= 

POST itest/_bulk
{"index":{"_id":"1"}}
{"msg":"안녕하세요"}
{"index":{"_id":"2"}}
{"msg":"안녕히가세요"}
{"index":{"_id":"3"}}
{"msg":"안녕히계세요"}

// 이렇게 할 수도 있다
-------------------------------------------
{"index":{"_index":"itest2", "_id":"1"}}
{"msg":"안녕하세요"}
{"index":{"_index":"itest2", "_id":"2"}}
{"msg":"안녕히가세요"}
{"index":{"_index":"itest2", "_id":"3"}}
{"msg":"안녕히계세요"}
itest파일을 json으로 (메모장에 위 내용 입력후 txt -> json으로 저장)
postman에 post로 localhost:9200/_bulk 입력 후
header의 key->Content-Type, value->application/json 
body의 binary 클릭 json 파일을 넣고 send
그러면 똑같이 생성된다
json파일에 한줄 여백이 있어야함
-------------------------------------------------------------

// 확인
GET itest2/_doc/1

# msg만 보이게
get itest2/_source/1

# itest2 인덱스의 id=1만 삭제
DELETE itest2/_doc/1

# itest2 인덱스 내용 전체 검색
GET itest2/_search

# itest2 인덱스 전체 삭제
DELETE itest2

# itest2 인덱스 내에 특정 item 검색
GET itest2/_search?q=msg:안녕히계세요

# 상위 10개 정도 만 보여짐
GET basketball/_search

GET basketball/_search?q=team:States

# term: 검색조건이 정확히 일치
GET basketball/_search
{
  "query": {
    "term": {
      "points":30
    }
  }
}

# match: 검색조건 포함(대소문자 무시)
# or: 띄어쓰기
GET basketball/_search
{
  "query": {
    "match": {
      "team":"States jazz"
    }
  }
}

# and: "query":검색어, operator":"and"
# -> 공백 중간이나 앞, 뒤에 다른 언어가 와도됨
# states랑 jazz가 있으면 됨
GET basketball/_search
{
  "query": {
    "match": {
      "team":{
         "query":"States jazz",
         "operator":"and"
      }
    }
  }
}

# match_phrase: 제시한 검색어는 정확히 일치. 앞이나 뒤에 다른 단어가 와도됨
# States Warrior가 정확히 있어야함
GET basketball/_search
{
  "query": {
    "match_phrase": {
      "team":"States Warriors"
    }
  }
}

# slop 옵션: 값의 공백사이의 단어가 slop의 갯수 ?개 이하의 단어가 들어와도됨
GET basketball/_search
{
  "query": {
    "match_phrase": {
      "team":{
        "query":"States Warriors",
        "slop":1
      }
    }
  }
}

# 문제 1. Washington이 들어가져있는 모든 문서 검색
GET basketball/_search
{
  "query": {
    "match": {
      "team":"Washington"
    }
  }
}

# 문제 2. Golden States    둘 중 하나라도 들어있는 문서 검색
GET basketball/_search
{
  "query": {
    "match": {
      "team":"Golden States"
    }
  }
}

# 문제 3. Golden States 공백 안에 1단어가 들어와도 검색
GET basketball/_search
{
  "query": {
    "match_phrase": {
      "team":{
        "query":"Golden States",
        "slop":1
      }
    }
  }
}

# 문제 4. Warriors States가 모두 들어있는 문서 검색
GET basketball/_search
{
  "query": {
    "match_phrase": {
      "team":"Warriors States"
    }
  }
}

# query_string: 여러개 검색 가능
# Golden과 Jazz가 들어있거나 Golden Warriors란 단어가 있는 팀
get basketball/_search
{
  "query":{
    "query_string": {
      "default_field": "team",
      "query": "(Golden AND Jazz) OR \"Golden Warriors\""
    }
  }
}

# bm25알고리즘을 통해 _score가 계산됨

# Bool Query: 여러 쿼리를 조합하여 사용가능
#           : 4개의 인자를 가지고 있다
# - must: 쿼리가 참인 문서들을 검색
# - must__not: 쿼리가 거짓인 문서들을 검색
# - should: 검색 결과 중 이 쿼리에 해당하는 문서들의 score를 높여줌
# - filter: 쿼리가 참인 문서를 검색하지만 score를 계산하지 않음
#         : must보다 검색 속도가 빠르다

[사용법]
GET 인덱스명/_search
{
   "query":{
      "bool":{
         "must"[
            {쿼리}, ...
         ],
         "must_not":[
            {쿼리}, ...
         ],
         "should":[
            {쿼리}, ...
         ],
         "filter":[
            {쿼리}, ...
         ]
      }
   }
}

# Jazz있고 Golden States 사이의 1개의 단어가 들어오는 것은 허용
GET basketball/_search
{
  "query":{
    "bool":{
      "must":[
        {"match": {"team":"Jazz"}}, 
        {"match_phrase": 
          {
            "team":{
              "query": "Golden States", 
              "slop":1
            }
          }
        }
      ]
    }
  }
}

# Jazz있고 Golden States 없는
GET basketball/_search
{
  "query":{
    "bool":{
      "must":[
        {"match": {"team":"Jazz"}}
       ],
      "must_not": [
        {"match_phrase": {
          "team":"Golden States"
        }}
      ]
    }
  }
}

# Jazz있고 Golden States 없는
GET basketball/_search
{
  "query":{
    "bool":{
      "must":[
        {"match": {"team":"Jazz"}}
      ],
      "must_not": [
        {"match_phrase": {
          "team":"Golden States"
        }}
      ]
    }
  }
}

# Golden이 들어가 있는 곳에 가중치를 주어 상위로 올리기
GET basketball/_search
{
  "query":{
      "bool":{
         "must":[
            {"match": {
               "team":"Jazz"
            }}
         ],
         "should": [
            {"match": {
               "team": "Golden"
            }}
         ]   
      }
   }
}

# should를 빼고 
GET basketball/_search
{
  "query":{
      "bool":{
        "must":[
          {"match": {
            "team":"Jazz"
          }},
          {"match": {
            "team": "Golden"
          }}
        ]
      }
   }
}

# filter
# jazz로만 검색한 것과 같은 score를 가짐
GET basketball/_search
{
  "query":{
    "bool":{
      "must":[
        {"match": {
          "team":"Jazz"
        }}
      ],
      "filter": [
        {"match": {
          "team": "Golden"
        }}
      ]
    }
  }
}

# range query: 숫자나 날짜 형식의 범위를 검색
# gte: ~이상
# gt: ~초과
# lte: ~이하
# lt: ~미만

# points가 10~19사이 검색
GET basketball/_search
{
  "query": {
    "range": {
      "points": {
        "gte": 10,
        "lt": 20
      }
    }
  }
}

# submit_date에서 2023년도 검색값
GET basketball/_search
{
  "query": {
    "range": {
      "submit_date": {
        "gte": "2023-01-01",
        "lte": "2023-12-31"
      }
    }
  }
}

# 데이터 색인: 역인덱스(단어 -> 매핑문서)
# -> tokenizer filter: 항목의 값으로 입력
GET _analyze
{
  "text":"Today is a day where i feel lucky and happy",
  "tokenizer":"whitespace",
  "filter":[
    "lowercase", // 소문자로 변환
    "stop",     // 불용어 제외
    "snowball" // 단어의 원형만
  ]
}

# -> filter에 넣은 순서대로 적용됨
GET _analyze
{
   "text":"Today Is A day where I feel lucky and happy",
   "tokenizer":"whitespace",
   "filter":[
      "stop",     
      "lowercase",   
      "snowball"   
   ]
}

# -> index의 구조 만들기
PUT t_index
{
   "mappings":{
   "properties":{
      "msg":{
         "type":"text",
         "analyzer":"snowball"
      }
   }
   }
}

PUT t_index/_doc/1
{
   "msg":"Today is a day where I feel lucky and happy"
}

GET t_index/_search

-> happy 검색됨
GET t_index/_search
{
"query":{
   "match":{
   "msg":"happy"
   }
}
}

// 원형으로 들어가기 때문에 happi로 저장됨 term으로 검색하면 happy는 검색 안됨
-> happy 안됨
GET t_index/_search
{
   "query":{
   "term":{
      "msg":"happy"
   }
   }
}

-> happy 검색됨
GET t_index/_search
{
   "query":{
   "term":{
      "msg":"happi"
   }
   }
}

-> 사용자 정의 토큰 필터 만들기
PUT t_index2
{
   "settings":{
   "index":{
      "analysis":{
         "analyzer":{
         "my_custom_analyzer":{
            "type":"custom",
            "tokenizer":"whitespace",
            "filter":[
               "lowercase",
               "my_stop_filter",
               "stop",
               "snowball"
            ]
         }
         },
         "filter":{
         "my_stop_filter":{
            "type":"stop",
            "stopwords":[
               "feel"
            ]
         }
         }
      }
   }
   }
}

GET t_index2/_analyze
{
   "analyzer":"my_custom_analyzer",
   "text":["Today is a day where I feel lucky and happy"]
}

PUT t_index3/_doc/1
{
  "msg":"Today is a day where I feel lucky and happy"
}

# _termvectors: term의 분석에 대한 자세한 정보보기
GET t_index3/_termvectors/1?fields=msg
"term_freq": 1, // 해당 단어가 들어가 있는 횟수
"tokens": [
{
   "position": 2, // 위치 (0부터)
   "start_offset": 9, // 시작번호(0부터)
   "end_offset": 10 // 끝번호
}
]

# 한글 형태소 분석기 nori
# 설치방법
# cmd -> cd elasticsearch/bin 폴더 -> elasticsearch-plugin install analysis-nori

# 기본
GET _analyze
{
  "analyzer":"standard",
  "text":["동해물과 백두산이"]
}

# 노리
GET _analyze
{
  "analyzer":"nori",
  "text":["동해물과 백두산이"]
}

# 사용자 사용 등록
PUT my_nori
{
  "settings": {
    "analysis":{
      "tokenizer":{
        "my_nori_token":{
          "type":"nori_tokenizer",
          "user_dictionary_rules":[
            "해물"
          ]
        }
      }
    }
  }
}

# 사용자 등록 토큰
GET my_nori/_analyze
{
  "tokenizer":"my_nori_token",
  "text":["동해물과 백두산이"]
}

# discompound_mod: 합성어(복합어) 처리 3가지
# none: 복합어를 분리하지 않음 (공백을 기준)
# discard: 복합어 분리 (a)
# mixed: none과 discard 모두 (공백 + a)

PUT my_nori2
{
  "settings": {
    "analysis": {
      "tokenizer": {
        "nori_none":{
          "type":"nori_tokenizer",
          "discompound_mode":"none"
        },
        "nori_discard":{
          "type":"nori_tokenizer",
          "discompound_mode":"discard"
        },
        "nori_mixed":{
          "type":"nori_tokenizer",
          "discompound_mode":"mixed"
        }
      }
    }
  }
}

GET my_nori2/_analyze
{
  "tokenizer":"nori_none",
  "text":["동해물과 백두산이"]
}

GET my_nori2/_analyze
{
  "tokenizer":"nori_discard",
  "text":["동해물과 백두산이"]
}

GET my_nori2/_analyze
{
  "tokenizer":"nori_mixed",
  "text":["동해물과 백두산이"]
}

# stoptags: 한글 품사 중 제외시킬 품사
# 디폴트 값 = 
# "stoptags":[
# "E"
# ]

# my_stoptag인덱스에서 수사(nr)을 제외
PUT my_stoptag
{
  "settings": {
    "index":{
      "analysis":{
        "filter":{
          "my_stop_tag":{
            "type":"nori_part_of_speech", // 이건 고정 타입임
            "stoptags":["NR"]
          }
        }
      }
    }
  }
}

GET my_stoptag/_analyze
{
  "tokenizer":"nori_tokenizer",
  "filter":["my_stop_tag"],
  "text":"일곱난장이들의 나들이"
}


# nori_readingform: 한자를 한글로 바꾸어 저장
GET _analyze
{
  "tokenizer":"nori_tokenizer",
  "filter":["nori_readingform"],
  "text":"立春大吉"
}

# explain: 품사정보를 같이 볼 수 있다
GET _analyze
{
  "tokenizer":"nori_tokenizer",
  "text":["동해물과 백두산이"],
  "explain":true
}

# 인덱스 settings 부사를 제외시키는 put만들기
put homework
{
  "settings": {
    "index":{
      "analysis":{
        "filter":{
          "my_stop_tag":{
            "type":"nori_part_of_speech", // 이건 고정 타입임
            "stoptags":["MAG", "MAJ"]
          }
        }
      }
    }
  }
}

# 인덱스 settings rules만들기 -> 테스트
PUT homework2
{
  "settings": {
    "analysis":{
      "tokenizer":{
        "my_nori_token":{
          "type":"nori_tokenizer",
          "user_dictionary_rules":[
            "해물"
          ]
        }
      }
    }
  }
}

# 인덱스 basketball에서 2024년도 정보 검색해오기
GET basketball/_search
{
  "query": {
    "range": {
      "submit_date": {
        "gte": "2024-01-01",
        "lte": "2024-12-31"
      }
    }
  }
}

# 인덱스 basketball에서 rebounds 3 이상인 것 모두 검색
GET basketball/_search
{
  "query": {
    "range": {
      "rebounds": {
        "gte": 3
      }
    }
  }
}

# mapping(=스키마)
# 자동으로 생성됨
# 너무 많은 정보를 담고있다

PUT books/_doc/1
{
  "title":"romeo n juliet",
  "author":"William Shakespeare",
  "category":"Tragedies",
  "publish_date":"1597-03-12T00:00:00",
  "page":200
}

# 전체 구조 중 mappings의 값만 조회
GET books/_mapping

# mapping의 정의
# 기존의 mapping에 추가는 가능하지만 바꾸지는 못한다
# [표현법]
# PUT 인데스명/_mapping
# {
# "properties":{
#   "추가할 필드명":{
#    "type":"필드 타입", ...
#   }
#  }
# }

# 기존의 books에 삽입
PUT books/_mapping
{
  "properties":{
    "content":{
      "type":"text"
    }
  }
}

GET books/_mapping

GET books/_search
{
  "query": {
    "match": {
      "title": "romeo" // 포함(대소문가 구분x)
    }
  }
}

GET books/_search
{
  "query": {
    "match": {
      "title.keyword": "romeo n juliet" // 원형 그대로 써야한다(대소문자 구분)
    }
  }
}


-> 숫자타입 : java의 타입과 동일 추가로
    - half_float: 2byte
    - scaled_flat : long형태로 저장. 옵션으로 소수점위치를 지정.

    mapping에 integer로 해놓고, 실수형을 넣으면 보여줄때는 실수형을 보여주지만
    실제 저장은 long형으로 저장되어 있음.

    PUT num_index
    {
      "mappings":{
        "properties":{
          "value":{
            "type":"integer"
          }
        }
      }
    }

    PUT num_index/_doc/1
    {
      "value":1
    }

    PUT num_index/_doc/2
    {
      "value":"2"
    }

    PUT num_index/_doc/3
    {
      "value":3.4
    }

    GET num_index/_search
    {
      "query":{
        "range":{
          "value":{
            "gte":1,
            "lt":3
          }
        }
      }
    }

    GET num_index/_search
    {
      "query":{
        "range":{
          "value":{
            "gt":3,
            "lt":5    // 결과 안나옴 3으로 저장되어 있기 때문
          }
        }
      }
    }

  -> coerce옵션 : 지정한 타입외에 받을지 안받을지 선택(기본값:true)
  PUT num_index2
  {
    "mappings":{
      "properties":{
        "value":{
          "type":"integer",
          "coerce":false
        }
      }
    }
  }

  PUT num_index2/_doc/1
  {
    "value":1
  }

  PUT num_index2/_doc/2
  {
    "value":"2"
  }

  PUT num_index2/_doc/3
  {
    "value":3.4
  }

  -> date : ISO8601 형식을 따름. 이외의 다른형식은 text로 인식
  PUT date_index/_doc/1
  {
    "date":"2024-03-12T16:45:30"    // type :date
  }

  PUT date_index2/_doc/1
  {
    "date":"12/mar/2024:16:45:30"   // type:text
  }

  GET date_index2

  -> mapping 미리 정의
  PUT date_index3
  {
    "mappings":{
      "properties":{
        "date":{
          "type":"date",
          "format":"dd/MMM/yyyy HH:mm:ss"
        }
      }
    }
  }

  PUT date_index3/_doc/1
  {
    "date":"12/Mar/2024 16:45:30"
  }

  PUT date_index3
  {
    "mappings":{
      "properties":{
        "date":{
          "type":"date",
          "format":"dd/MMM/yyyy HH:mm:ss"||epoch_millis||yyyy-MM-dd
        }
      }
    }
  }

  -> object
  PUT movies/_doc/1
  {
   "movie":{
      "name":"Iron Man",
      "side":"superhero"
   }
  }

  GET movies/_mapping

GET movies/_search
{
  "query": {
    "match": {
      "movie.name": "man"
    }
  }
}

PUT movies/_doc/2
{
  "title":"The Avengers",
  "movie":[ // 배열표시 아님
  {
    "name":"Iron Man",
    "side":"superhero"
  },
  {
    "name":"Loki",
    "side":"villian"
  },
  {
    "name":"Spider Man",
    "side":"superhero"
  }]
}

PUT movies/_doc/3
{
  "title":"The Avengers: Infinity War",
  "movie":[ // 배열표시 아님
  {
    "name":"Loki",
    "side":"superhero"
  },
  {
    "name":"Thanos",
    "side":"villian"
  }]
}

# name은 Loki, side는 villian 문서 검색
# 결과 2개의 문서를 검색해 옴
GET movies/_search
{
  "query": {
    "bool": {
      "must": [ // name이 Loki인게 참이고 side가 villian인게 참인 경우를 검색
        {
          "match": {
            "movie.name": "Loki"
          }  
        },
        {
          "match": {
            "movie.side": "villian"
          }
        }
      ]
    } 
  }
}

# nested: 내부에 있는 object값들을 서로 다른 역색인을 만든다
# 1개의 문서를 검색해 오기

PUT movies2
{
  "mappings": {
    "properties": {
      "movie":{
        "type": "nested",
        "properties": {
          "name":{
            "type":"text"
          },
          "side":{
            "type":"keyword"
          }
        }
      }
    }
  }
}

GET movies2/_search
{
  "query": {
    "nested": {
      "path":"movie",
      "query": {
        "bool": {
          "must": [
            {
              "match": {
                "movie.name": "Loki"
              }  
            },
            {
              "match": {
              "movie.side": "villian"
              }
            }
          ]
        } 
      }
    }
  }
}

# Geo: 위치 정보
PUT geo_index/_doc/1
{
  "location":{
    "lat":42.25548, // 경도
    "lon":3.46345   // 위도
  }
}
GET geo_index/_mapping // type: float 위지가 매핑이 되지 않았다는 것

# geo_point 지정
PUT geo_index2
{
  "mappings":{
    "properties":{
      "location":{
        "type":"geo_point"
      }
    }
  }
}

PUT geo_index2/_doc/1
{
  "location":{
    "lat":42.25548,
    "lon":3.46345
  }
}

GET geo_index2/_mapping // type: geo_mapping으로 

PUT geo_index3
{
  "mappings":{
    "properties":{
      "location":{
        "type":"geo_point"
      }
    }
  }
}

POST geo_index3/_bulk
{"index":{"_id":"1"}}
{"station":"강남","location":{"lon":127.027926,"lat":37.497175},"line":"2호선"}
{"index":{"_id":"2"}}
{"station":"종로3가","location":{"lon":126.991806,"lat":37.571607},"line":"3호선"}
{"index":{"_id":"3"}}
{"station":"여의도","location":{"lon":126.924191,"lat":37.521624},"line":"5호선"}
{"index":{"_id":"4"}}
{"station":"서울역","location":{"lon":126.972559,"lat":37.554648},"line":"1호선"}

# geo_bounding_box검색: 사각형 박스안에 들어온 위치 검색
GET geo_index3/_search
{
  "query": {
    "geo_bounding_box": {
      "location": {
        "bottom_right": {
          "lat": 37.5555,
          "lon": 127.02222
        },
        "top_left": {
          "lat": 37.5888,
          "lon": 126.9888
        }
      }
    }
  }
}

# geo_distance 검색: 포인트와 거리를 주면 그 거리를 반지름으로하여 원형을 만들어 그 원안의 위치 검색
GET geo_index3/_search
{
  "query": {
    "geo_distance": {
      "distance": "5km",
      "location": {
        "lat": 37.53333,
        "lon": 126.96666
      }
    }
  }
}

# geo_shape: 여러개의 포인터를 연결하여 면안에 들어오는 위치 검색

# Aggregations: 집계(=aggs)
# - Metrics Aggregaions: 산술 min, max, count, sum, avg, stats

POST ball_index/_bulk
{ "index" : {"_id" : "1" } }
{"team" : "Golden States Warriors","name" : "Stephen Curry", "points" : 30,"rebounds" : 3,"assists" : 4, "blocks" : 5, "submit_date" : "2024-10-11"}
{ "index" : {"_id" : "2" } }
{"team" : "Golden States Warriors","name" : "Stephen Curry","points" : 32,"rebounds" : 5,"assists" : 8, "blocks" : 5, "submit_date" : "2024-10-13"}

# -> max
GET ball_index/_search
{
  "size": 0,
  "aggs": {
    "max_score": {
      "max": {
        "field": "points"
      }
    }
  }
}

# -> min
GET ball_index/_search
{
  "size": 0,
  "aggs": {
    "min_score": {
      "min": {
        "field": "points"
      }
    }
  }
}

# -> sum
GET ball_index/_search
{
  "size": 0,
  "aggs": {
    "sum_score": {
      "sum": {
        "field": "points"
      }
    }
  }
}

# -> avg
GET ball_index/_search
{
  "size": 0,
  "aggs": {
    "avg_score": {
      "avg": {
        "field": "points"
      }
    }
  }
}

# -> stats: 위의 4개 + count의 모든걸 볼 수 있다
GET ball_index/_search
{
  "size": 0,
  "aggs": {
    "stats_score": {
      "stats": {
        "field": "points"
      }
    }
  }
}

# Bucket Aggregaions: 그룹
GET basketball2/_search

{
  "size": 0,
  "aggs": {
    "player": {
      "terms": {
        "field": "team"
      }
    }
  }
}

-> 팀별로 합계,평균...
  GET basketball2/_search
  {
    "size":0,
    "aggs":{
      "team_stats":{
        "terms":{
          "field":"team.keyword"
        },
        "aggs":{
          "stats_score":{
            "stats":{
              "field":"points"
            }
          }
        }
      }
    }
  }

  -> 전체 인덱스 검색
  GET _cat/indices?v


  ============================================================================

                                  logstash

  * 실행 기본 문법
  input{
    stdin{}
  }
  filter{

  }
  output{
    stdout{}
  }

  실행시 cmd에서 
  ~~~~ \logstash-8.12.2\bin>logstash -e "input{stdin{}} output{stdout{}}"

  - 파일생성 하여 실행해 보기
    * 파일 위치:  ~~~~ \logstash-8.12.2\log_test01.conf
    * 실행 : ~~~~ \logstash-8.12.2\bin>logstash -f log_test01.conf

  - tcp로 보낸 파라미터 콘솔에 출력하기
    * config파일 : ~~~~ \logstash-8.12.2\log_test02.conf
    * 실행 : ~~~~ \logstash-8.12.2\bin>logstash -f log_test02.conf

  - 세계인구 파일을 가공하여 엘라시틱서치에 보내기
    * config파일 : ~~~~ \logstash-8.12.2\log_population.conf
    * 실행 : ~~~~ \logstash-8.12.2\bin>logstash -f log_population.conf

    * elasticsearch에 넣기 전에 사용하기 편하게 가공이 필요
      - mutate filter : 특정 필드를 가공해줌
        옵션
        - convert : 형변환
        - copy : 값 복사
        - gsub : 정규식에 일치하는 항목을 다른 문자열로 대체
        - join : 배열을 하나로 합침
        - split : 문자를 배열로 나눔
        - lowercase, uppercase
        - capitalize : 첫글자만 대문자로
        - merge : 필드 값들을 다른 필드에 포함
        - coerce : 값이 null일때 넣을 기본값설정
        - update : 값을 업데이트
        - strip : 좌우공백 제거
        - rename : 필드이름 변경